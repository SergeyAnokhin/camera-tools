version: '3.4'

services:

  ########################
  camera_tools: ##########
  ########################
    # docker-compose run camera_tools bash 
    container_name: camera_tools
    image: camera_tools
    build:
      context: .
      dockerfile: ./Dockerfile
    # command: ["sh", "-c", "pip install debugpy -t /tmp && python /tmp/debugpy --wait-for-client --listen 0.0.0.0:5678 manage.py runserver 0.0.0.0:8000 --nothreading --noreload --settings=web.settings.dev_at_home"]
            # python manage.py migrate &&
            # python manage.py create_superuser_with_password --no-input --email s@mail.com --username star --preserve &&
            # python manage.py runserver 0.0.0.0:8000 --settings=web.settings.${DJANGO_SETTINGS} "
    command: > 
      bash -c "echo @@@@@@@@@@ LINUX CONTAINER FROM HERE @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ &&
          echo 📦Docker:: Using 🔧settings: web.settings.${DJANGO_SETTINGS} &&
          echo 📦Docker:: Mount 🗄️servers: Diskstation, Hassio &&
          mkdir -p /mnt/CameraArchive &&
          mkdir -p /mnt/Hassio &&
          mkdir -p /mnt/Photo &&
          mount -t cifs -o username=camera_tools,password=${HASSIO_PASSWORD} //${DISKSTATION_IP}/CameraArchive /mnt/CameraArchive || true && 
          mount -t cifs -o username=star,password=${DISKSTATION_PASSWORD},vers=3.0 //${HASSIO_IP}/config /mnt/Hassio || true && 
          mount -t cifs -o username=camera_tools,password=${HASSIO_PASSWORD} //${DISKSTATION_IP}/photo /mnt/Photo || true && 
          export DJANGO_SETTINGS_MODULE=web.settings.${DJANGO_SETTINGS} &&
          echo 📦Docker :: Wait for connection debugger : 🔗 http://localhost:5678 &&
          echo 🌎Start Django @ 🔗 http://localhost:3150 &&
          pip install debugpy -t /tmp && python /tmp/debugpy --wait-for-client --listen 0.0.0.0:5678 manage.py runserver 0.0.0.0:8000 --nothreading --settings=${DJANGO_SETTINGS} "
    #  --noreload ==> for suppress reloading python on files changing. Using for Prod?
    ports:
      - 3150:8000
      - 5678:5678
    volumes:
    #  - .:/code
      - ${SRC_PATH}/camera-tools:/app
      - ${SRC_PATH}/camera-OpenCV-data:/camera-OpenCV-data
      - ${CAMERA_LIVE_PATH}:/mnt/Camera
    deploy:
      resources:
        limits:
          cpus: '1.00'
    cap_add: 
      - DAC_READ_SEARCH # for mount smb
      - SYS_ADMIN # for mount smb
    environment:
      - COMPOSE_CONVERT_WINDOWS_PATHS=1
      - USERNAME # copy from host machine
      - COMPUTERNAME # copy from host machine
      # - VARIABLE_FROM_LOCAL_ENV # copy from host machine: cmd: set VARIABLE_FROM_LOCAL_ENV OK alpine: echo $VARIABLE_FROM_LOCAL_ENV
      - VARIABLE_FROM_ENV_FILE # copy from host machine: check .env file
      # - VARIABLE_FROM_GLOBAL_ENV # copy from host machine
      - DJANGO_ADMIN_PASSWORD
      - host_net_interfaces
      - host_wifi_name
      - docker_container=1
    #network_mode: host
    networks:
      - elastic

  ########################
  elasticsearch:
  ########################
    container_name: Elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.0
    environment:
      - node.name=es01
      - bootstrap.memory_lock=false
      - discovery.type=single-node
      - cluster.name=elastic-docker-mssurface
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "3192:9200"
      - "3193:9300"
    volumes: 
      - ${SRC_PATH}\docker\elasticsearch\elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ${SRC_PATH}\docker\elasticsearch\log4j.properties:/usr/share/elasticsearch/config/log4j2.properties
      - ${DATA_DRIVE}Data\Elasticsearch7:/data
      - ${DATA_DRIVE}Logs\Elasticsearch7:/logs
      - ${DATA_DRIVE}BackUp\Elasticsearch7:/snapshot7
      - ${DATA_DRIVE}BackUp\Elasticsearch:/snapshot
    networks:
      - elastic

  ########################
  kibana:
  ########################
    container_name: Kibana
    image: docker.elastic.co/kibana/kibana:7.16.0 # OK 7.11.2
    ports:
      - "3156:5601"
    environment: 
      - logging.json=false
    networks:
      - elastic
    depends_on:
      - elasticsearch


networks:
  elastic:
    driver: bridge

# .wslconfig:
# [wsl2]
# # memory=768MB   # NOK
# memory=1GB # OK  
# # processors=2 # Makes the WSL 2 VM use two virtual processors
# guiApplications=false # OK
# swap=8GB # OK
# localhostForwarding=true # OK